Exercises: Reinforcement.

R-2.1 Give three examples of life-critical software applications?

>Radiation-Therapy Machine;
Air-traffic system;
Nuclear Reactor.


R-2.2 Give an example of a software application in which adaptability can mean the
difference between a prolonged lifetime of sales and bankruptcy.

>Internet Search Engines.


R-2.3 Describe a component from a text-editor GUI and the methods that it encapsulates.


R-2.4 Assume that we change the CreditCard class (see Code Fragment 1.5) so that
instance variable balance has private visibility. Why is the following implementation of the PredatoryCreditCard.charge method flawed?

public boolean charge(double price) {
  boolean isSuccess = super.charge(price);
    if (!isSuccess)
      charge(5); // the penalty
  return isSuccess;
}

>Afeter the limit is reached this approach will cause the recursive charge to execute forever.
"super.charge(price);" will always return false.

R-2.5 Assume that we change the CreditCard class (see Code Fragment 1.5) so that
instance variable balance has private visibility. Why is the following implementation of the PredatoryCreditCard.charge method flawed?

public boolean charge(double price) {
  boolean isSuccess = super.charge(price);
    if (!isSuccess)
      super.charge(5); // the penalty
  return isSuccess;
}

>Changing the superclass instance variable balance modifier assessor to private will not cause compile time error,
because charge's PredatoryCreditCard class method make a call to the superclass CreditCard method instead of trying access it directly.
On the other hand it will cause not a compile time error nor runtime exception but will not perform any charge 
after the limit is reached.


R-2.6 Give a short fragment of Java code that uses the progression classes from Section 2.2.3 
to find the eighth value of a Fibonacci progression that starts with 2
and 2 as its first two values.

prog = new FibonacciProgression(2, 2);


If we choose an increment of 128, how many calls to the nextValue method from
the ArithmeticProgression class of Section 2.2.3 can we make before we cause a
long-integer overflow?

> 128^8 or 2^56 calls to nextValue before cause a long-integer overvflow.
